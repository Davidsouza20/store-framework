"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const boxen_1 = tslib_1.__importDefault(require("boxen"));
const ora_1 = tslib_1.__importDefault(require("ora"));
const utils_1 = require("../../api/error/utils");
const Workspaces_1 = require("../../api/clients/IOClients/infra/Workspaces");
const SessionManager_1 = require("../../api/session/SessionManager");
const logger_1 = tslib_1.__importDefault(require("../../api/logger"));
const prompts_1 = require("../../api/modules/prompts");
const VBase_1 = require("../../api/clients/IOClients/infra/VBase");
const url_1 = tslib_1.__importDefault(require("../url"));
const use_1 = tslib_1.__importDefault(require("./use"));
const Colors_1 = require("../../lib/constants/Colors");
const Messages_1 = require("../../lib/constants/Messages");
const { checkForConflicts } = VBase_1.VBase.createClient();
const { promote, get } = Workspaces_1.createWorkspacesClient();
const { account, workspace: currentWorkspace } = SessionManager_1.SessionManager.getSingleton();
const workspaceUrl = url_1.default();
const throwIfIsMaster = (workspace) => {
    if (workspace === 'master') {
        throw utils_1.createFlowIssueError(Messages_1.Messages.PROMOTE_MASTER_ERROR(workspace));
    }
};
const handleConflict = async () => {
    const conflictsFound = await checkForConflicts();
    if (conflictsFound) {
        await axios_1.default.get(workspaceUrl);
    }
};
const isPromotable = async (workspace) => {
    throwIfIsMaster(workspace);
    const meta = await get(account, currentWorkspace);
    if (!meta.production) {
        throw utils_1.createFlowIssueError(Messages_1.Messages.PROMOTE_NOT_PRODUCTION_ERROR(workspace));
    }
    const spinner = ora_1.default(Messages_1.Messages.PROMOTE_SPINNER_START).start();
    spinner.color = Colors_1.COLORS.MAGENTA;
    await handleConflict();
    spinner.succeed();
};
const promptPromoteConfirm = (workspace) => prompts_1.promptConfirm(Messages_1.Messages.PROMOTE_PROMPT_CONFIRM(workspace), true);
exports.default = async () => {
    logger_1.default.debug(Messages_1.Messages.PROMOTE_INIT, currentWorkspace);
    await isPromotable(currentWorkspace);
    console.log(Messages_1.Messages.PROMOTE_CHECK_WORKSPACE(currentWorkspace, workspaceUrl));
    const promptAnswer = await promptPromoteConfirm(currentWorkspace);
    if (!promptAnswer) {
        logger_1.default.info(Messages_1.Messages.PROMOTE_PROMPT_NEGATIVE_ANSWER(currentWorkspace));
        return;
    }
    await promote(account, currentWorkspace);
    logger_1.default.info(Messages_1.Messages.PROMOTE_SUCCESS(currentWorkspace));
    console.log(boxen_1.default(Messages_1.Messages.PROMOTE_ASK_FEEDBACK, {
        padding: 1,
        margin: 1,
    }));
    await use_1.default('master');
};
